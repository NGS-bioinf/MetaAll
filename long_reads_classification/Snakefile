# This script performs quality check, trimming, host removal, assembly, polishing, read/contig classification and visualization preparation.
# Before run, set the parameters in config.yml file and run_analysis.sh script.

import os

configfile: 
         "config.yml"
    
output=config["output_dir"]
length=config["min_length"]
quality=config["quality_score"]
headcrop=config["headcrop_length"]
tailcrop=config["tailcrop_length"]
ref=config["reference_genome"]
model=config["medaka_model"]
min_con=config["minimum_contig_length"]
krakenuniq_path=config["krakenuniq_db_path"]
krona=config["krona_path"]
hmm=config["hmm_db"]
diamond=config["diamond_db"]
taxonmap=config["taxonmap_db"]
taxonnodes=config["taxonnodes_db"]
taxonnames=config["taxonnames_db"]
megan=config["megan_db"]
memory=config["memory_limit"]

samples=os.listdir(config['input_fastq'])   

#########################
######## RULES ##########
#########################

rule all:
    input:
        expand([ 
           # cat raw fastq 
           "{results}/preprocess/catfastq/{sample}.fastq.gz",
           # nanoplot raw
           "{results}/preprocess/QC/reports_raw/{sample}",
           # nanocomp raw
           "{results}/preprocess/QC/combined_raw",
           # porechop_abi
           "{results}/preprocess/adapter_trim/{sample}.fastq.gz",
           # nanofilt
           "{results}/preprocess/quality_trim/{sample}_trim.fastq.gz",
           # nanoplot filtered
           "{results}/preprocess/QC/reports_trim/{sample}",
           # nanocomp filtered
           "{results}/preprocess/QC/combined_trim",
           # minimap2 + samtools
           "{results}/preprocess/host_depl/bam_files/{sample}_unal_sort.bam",
           "{results}/preprocess/host_depl/{sample}_clean.fastq.gz",
           # krakenuniq
           "{results}/read_classification_results/krakenuniq_taxonomic/{sample}.krakenuniq",
           "{results}/read_classification_results/pavian_reports/{sample}_krakenuniq.report",
           # edit krona
           "{results}/read_classification_results/krona_visualization/{sample}.krakenuniq.krona",
           # krona
           "{results}/read_classification_results/krona_visualization/{sample}.krona.html",
           # metaflye
           "{results}/contig_classification_results/assembly/tmp/denovo_assembly/{sample}",
           "{results}/contig_classification_results/assembly/tmp/draft_assembly/{sample}.fasta",
           "{results}/contig_classification_results/assembly/tmp/draft_assembly/{sample}.gfa",
           # medaka 
           "{results}/contig_classification_results/assembly/tmp/polishing/{sample}",
           "{results}/contig_classification_results/assembly/tmp/polished_assembly/{sample}.fasta",
           "{results}/contig_classification_results/assembly/final_assembly/{sample}.fasta",
           # viralverify
           "{results}/contig_classification_results/viralverify_classification/{sample}",
           # diamond blastx
           "{results}/contig_classification_results/diamond_blast/{sample}_diamond_blast_contigs.daa",
           # daa-meganizer
           "{results}/contig_classification_results/meganizer_logs/{sample}.log",
           # diamond view
           "{results}/contig_classification_results/diamond_view/{sample}_diamond_blast_contigs.tab",
           # krona
           "{results}/contig_classification_results/krona_visualization/{sample}_krona_plot.html",
        ], results=output, sample=samples)

rule catfastq:
    input:
        config['input_fastq']+"/{sample}"
    output:
        "{results}/preprocess/catfastq/{sample}.fastq.gz"
    shell:
        "date && cat {input}/* > {output} && date"

rule nanoplot_raw:
    input:
        "{results}/preprocess/catfastq/{sample}.fastq.gz"
    output:
        directory("{results}/preprocess/QC/reports_raw/{sample}")
    threads: 128
    singularity: config['singularity_image_path']+"/nano_bioinformatics.sif"
    shell:
        "date && NanoPlot -t {threads} --fastq {input} --loglength -o {output} --plots dot && date"
        
rule nanocomp_raw:
    input:
        fastq=expand("{results}/preprocess/catfastq/{sample}.fastq.gz", results=output, sample=samples),
    output:
        directory("{results}/preprocess/QC/combined_raw")
    threads: 128
    singularity: config['singularity_image_path']+"/nano_bioinformatics.sif"
    shell:
        "date && NanoComp -t {threads} --fastq {input.fastq} -o {output} && date"

rule porechop_abi:
    input:
        "{results}/preprocess/catfastq/{sample}.fastq.gz"
    output:
        "{results}/preprocess/adapter_trim/{sample}.fastq.gz"
    threads: 128
    singularity: config['singularity_image_path']+"/nano_bioinformatics.sif"
    shell:
        "date && porechop_abi -abi -i {input} -o {output} -t {threads} && date" 

rule nanofilt:
    input:
        "{results}/preprocess/adapter_trim/{sample}.fastq.gz"
    output:
        "{results}/preprocess/quality_trim/{sample}_trim.fastq.gz"
    threads: 128
    singularity: config['singularity_image_path']+"/nano_bioinformatics.sif"
    shell:
        "date && zcat {input} | NanoFilt -q {quality} -l {length} --headcrop {headcrop} --tailcrop {tailcrop} | gzip > {output} && date"        

rule nanoplot_trim:
    input:
        "{results}/preprocess/quality_trim/{sample}_trim.fastq.gz"
    output:
        directory("{results}/preprocess/QC/reports_trim/{sample}")
    threads: 128
    singularity: config['singularity_image_path']+"/nano_bioinformatics.sif"
    shell:
        "date && NanoPlot -t {threads} --fastq {input} --loglength -o {output} --plots dot && date"

rule nanocomp_trim:
    input:
        expand("{results}/preprocess/quality_trim/{sample}_trim.fastq.gz", results=output, sample=samples)
    output:
        directory("{results}/preprocess/QC/combined_trim")
    threads: 128
    singularity: config['singularity_image_path']+"/nano_bioinformatics.sif"
    shell:
        "date && NanoComp -t {threads} --fastq {input} -o {output} && date"

rule minimap2_samtools:
    input:
        "{results}/preprocess/quality_trim/{sample}_trim.fastq.gz"
    output:
        "{results}/preprocess/host_depl/bam_files/{sample}_unal_sort.bam"
    threads: 128
    singularity: config['singularity_image_path']+"/nano_bioinformatics.sif"
    shell:
        "date && minimap2 -a -t {threads} -x map-ont {ref} {input} | samtools view -uhS -f 4 -@ {threads} | samtools sort -@ {threads} > {output} && date"

rule samtools_fastq:
    input:
        "{results}/preprocess/host_depl/bam_files/{sample}_unal_sort.bam"
    output:
        "{results}/preprocess/host_depl/{sample}_clean.fastq.gz"
    singularity: config['singularity_image_path']+"/nano_bioinformatics.sif"
    threads: 128
    shell:
        "date && samtools fastq {input} -n -@ {threads} | gzip > {output} && date"

rule krakenuniq:
    input:
        "{results}/preprocess/host_depl/{sample}_clean.fastq.gz"
    output:
        krakenuniq_class = "{results}/read_classification_results/krakenuniq_taxonomic/{sample}.krakenuniq",
        report = "{results}/read_classification_results/pavian_reports/{sample}_krakenuniq.report",
    threads: 128
    singularity: config['singularity_image_path']+"/kraken.sif"
    shell:
        "date && krakenuniq --db {krakenuniq_path} --preload-size {memory}G --report {output.report} --check-names --threads {threads} {input} > {output.krakenuniq_class} && date"
               
rule edit_krona:
    input:
        "{results}/read_classification_results/krakenuniq_taxonomic/{sample}.krakenuniq"
    output:
        "{results}/read_classification_results/krona_visualization/{sample}.krakenuniq.krona"
    shell:
        "date && cat {input} | cut -f 2,3 > {output} && date"
       
rule krona_read:
    input:
        "{results}/read_classification_results/krona_visualization/{sample}.krakenuniq.krona"
    output:
        "{results}/read_classification_results/krona_visualization/{sample}.krona.html"
    singularity: config['singularity_image_path']+"/kraken.sif"
    shell:
        "date && ktImportTaxonomy {input} -o {output} -tax {krona} && date"

rule metaflye:
    input:
        "{results}/preprocess/host_depl/{sample}_clean.fastq.gz"
    output:
        directory("{results}/contig_classification_results/assembly/tmp/denovo_assembly/{sample}")
    threads: 128
    singularity: config['singularity_image_path']+"/nano_bioinformatics.sif"
    shell:
        "date && flye --nano-raw {input} --meta -t {threads} -o {output} && date"

rule copy_raw_fasta:
    input:
        "{results}/contig_classification_results/assembly/tmp/denovo_assembly/{sample}"
    output:
        "{results}/contig_classification_results/assembly/tmp/draft_assembly/{sample}.fasta"
    shell:
        "date && cp {input}/assembly.fasta {output} && date"

rule copy_gfa:
    input:
        "{results}/contig_classification_results/assembly/tmp/denovo_assembly/{sample}"
    output:
        "{results}/contig_classification_results/assembly/tmp/draft_assembly/{sample}.gfa"
    shell:
        "date && cp {input}/assembly_graph.gfa {output} && date"

rule medaka:
    input:
        fastq="{results}/preprocess/host_depl/{sample}_clean.fastq.gz",
        assembly="{results}/contig_classification_results/assembly/tmp/draft_assembly/{sample}.fasta"
    output:
        directory("{results}/contig_classification_results/assembly/tmp/polishing/{sample}")
    threads: 128
    singularity: config['singularity_image_path']+"/medaka.sif"
    shell:
        "date && medaka_consensus -i {input.fastq} -d {input.assembly} -o {output} -t {threads} -m {model} && date"

rule copy_polished_fasta:
    input:
        "{results}/contig_classification_results/assembly/tmp/polishing/{sample}"
    output:
        "{results}/contig_classification_results/assembly/tmp/polished_assembly/{sample}.fasta"
    shell:
        "date && cp {input}/consensus.fasta {output} && date"

rule seqtk:
    input:
        "{results}/contig_classification_results/assembly/tmp/polished_assembly/{sample}.fasta"
    output:
        "{results}/contig_classification_results/assembly/final_assembly/{sample}.fasta"
    threads: 128
    singularity: config['singularity_image_path']+"/nano_bioinformatics.sif" 
    shell:
        "date && seqtk seq -L {min_con} {input} > {output} && date"

rule viralverify:
    input:
        "{results}/contig_classification_results/assembly/final_assembly/{sample}.fasta"
    output:
        directory("{results}/contig_classification_results/viralverify_classification/{sample}")
    threads: 128
    singularity: config['singularity_image_path']+"/bioinfo_meta.sif"
    shell:
        "date && viralverify -t {threads} -p -f {input} -o {output} --hmm {hmm} && date"

rule diamond_blastx:
    input:
        "{results}/contig_classification_results/assembly/final_assembly/{sample}.fasta"
    output:
        "{results}/contig_classification_results/diamond_blast/{sample}_diamond_blast_contigs.daa"
    threads: 128
    singularity: config['singularity_image_path']+"/bioinfo_meta.sif"
    shell:
        "date && diamond blastx -d {diamond} --taxonmap {taxonmap} --taxonnodes {taxonnodes} --taxonnames {taxonnames} -q {input} --threads {threads} --block-size 6 --outfmt 100 -o {output} && date"

rule daa_meganizer:
    input:
        "{results}/contig_classification_results/diamond_blast/{sample}_diamond_blast_contigs.daa"
    log:
        "{results}/contig_classification_results/meganizer_logs/{sample}.log"
    threads: 128
    singularity: config['singularity_image_path']+"/bioinfo_meta.sif"
    shell:
        "date && daa-meganizer --threads {threads} -i {input} --classify -mdb {megan} > {log} && date"

rule diamond_view:
    input:
        "{results}/contig_classification_results/diamond_blast/{sample}_diamond_blast_contigs.daa"
    output:
        "{results}/contig_classification_results/diamond_view/{sample}_diamond_blast_contigs.tab"
    singularity: config['singularity_image_path']+"/bioinfo_meta.sif"
    shell:
        "date && diamond view --daa {input} -o {output} && date"

rule krona_contig:
    input:
        "{results}/contig_classification_results/diamond_view/{sample}_diamond_blast_contigs.tab"
    output:
        "{results}/contig_classification_results/krona_visualization/{sample}_krona_plot.html"
    singularity: config['singularity_image_path']+"/krona.sif"
    shell:
        "date && ktImportBLAST {input} -o {output} && date"