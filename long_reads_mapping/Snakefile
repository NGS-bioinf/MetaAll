# This script performs mapping on the provided reference genome and calculation of the mapping statistics.
# Before run, set the parameters in config.yml file and run_workflow.sh script.

import os
import glob

configfile: 
         "config.yml"
    
output=config["output_dir"]
ref=config["reference_genome"]
min_MQ=config["mapping_quality_threshold"]
min_BQ=config["base_quality_threshold"]
min_mq=config["minimum_map_quality"]
cutoff_q=config["cutoff_quality"]
min_depth=config["minimum_depth"]
max_depth=config["maximum_depth"]
bq=config["minimum_quality_ivar"]
freq=config["minimum_frequency"]
min_depth_ivar=config["minimum_depth_ivar"]
fastqDir = config["input_fastq"] + '/'
samples = glob.glob(fastqDir + '*.fastq.gz')
samples = [os.path.basename(x) for x in samples]
samples = [x.replace('.fastq.gz','') for x in samples]

#########################
######## RULES ##########
#########################

def get_r(wildcards):
    return glob.glob(fastqDir + wildcards.sample + '.fastq.gz')
    
rule all:
    input:
        expand([ 
           # minimap2 + samtools
           "{results}/ref_mapping/bam_files/{sample}_sort.bam",
           "{results}/ref_mapping/bam_files/{sample}_sort.bam.bai",
           "{results}/ref_mapping/coverage_reports/{sample}_coverage.txt",
           "{results}/ref_mapping/mapping_statistics/{sample}_allstats.txt",
        ], results=output, sample=samples)

rule minimap2_samtools:
    input:
        get_r
    output:
        "{results}/ref_mapping/bam_files/{sample}_sort.bam"
    threads: 64
    singularity: "/grid/singularity_images/nano_bioinformatics.sif"
    shell:
        "minimap2 -a -t {threads} -x map-ont {ref} {input} | samtools view -F 4 -uhS -@ {threads} | samtools sort -@ {threads} > {output}"

rule samtools_coverage:
    input:
        "{results}/ref_mapping/bam_files/{sample}_sort.bam"
    output:
        "{results}/ref_mapping/coverage_reports/{sample}_coverage.txt"
    singularity: "/grid/singularity_images/nano_bioinformatics.sif"
    shell:
        "samtools coverage -q {min_MQ} -Q {min_BQ} {input} -o {output}"

rule samtools_flagstat:
    input:
        "{results}/ref_mapping/bam_files/{sample}_sort.bam"
    output:
        "{results}/ref_mapping/mapping_statistics/{sample}_allstats.txt"
    singularity: "/grid/singularity_images/nano_bioinformatics.sif"
    shell:
        "samtools flagstat {input} > {output}"

rule samtools_index:
    input:
        "{results}/ref_mapping/bam_files/{sample}_sort.bam"
    output:
        "{results}/ref_mapping/bam_files/{sample}_sort.bam.bai"
    threads: 64
    singularity: "/grid/singularity_images/nano_bioinformatics.sif"
    shell:
        "samtools index {input} > {output}"